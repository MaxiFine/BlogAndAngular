scp -i blog-app-kp.pem /mnt/c/Users/MaxwellAdomako

THIS CMD enabled me to upload the env file to the ec2 home user path
scp -i blog-app-kp.pem /mnt/c/Users/MaxwellAdomako/IdeaProjects/learnings/blog/.env ec2-user@18.175.237.135:/home/ec2-user/



docker build -t $DOCKER_IMAGE_NAME:$IMAGE_TAG -f BlogAndAngular/Dockerfile BlogAndAngular/


COMPOSE FILE EDIT

#services:
#  # Spring boot application Service
#  blog-app:
##    build:
##      context: .
##      dockerfile: Dockerfile
##    container_name: blog-dockerized-2
##    working_dir: /app
##    TESTING PULL IMAGE
#    image: maxfine22/blog-app:2.5
#    restart: on-failure:1
#    ports:
#      - 8027:8027
##    env_file:
##      - .env
#    networks:
#      - blog-app-network
#
#networks:
#  blog-app-network:
#    driver: bridge
#
#volumes:
#  postgres_data:
#    driver: local

aws s3api get-bucket-location --bucket blog-lab-bucket


oneline command
ssh -o StrictHostKeyChecking=no ${deployUser}@${ec2Host} "cd ${remotePath} && (docker-compose down || true) && docker-compose pull && docker-compose up -d"

multiple but one cleaner code
ssh -o StrictHostKeyChecking=no ${deployUser}@${ec2Host} \
    "cd ${remotePath} && \
    (docker-compose down || true) && \
    docker-compose pull && \
    docker-compose up -d"


JENKINS FIX COMMMANDS WITH SERVICE FAILURE
sudo chown -R jenkins:jenkins /var/lib/jenkins
sudo systemctl start jenkins
sudo chown -R jenkins:jenkins /var/lib/jenkins
sudo systemctl start jenkins


checkout error fix attempts
git branch: 'main', url: 'https://github.com/your-repository.git', shallow: true

checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/MaxiFine/BlogAndAngular.git']], extensions: [[$class: 'CloneOption', depth: 1]]])


FIXING EC2 STAGE ERROR WHEN THE IP ADDRESS CHANGED

COMMANDS
sudo cp /home/max/pem/blog-lab-ec2.pem /var/lib/jenkins/.ssh/
sudo chown jenkins:jenkins /var/lib/jenkins/.ssh/blog-lab-ec2.pem
sudo chmod 600 /var/lib/jenkins/.ssh/blog-lab-ec2.pem


snippet to explitly use pemfile
stage('Deploy to EC2') {
    steps {
        script {
            def pemPath = '/var/lib/jenkins/.ssh/blog-lab-ec2.pem'
            def ec2Host = '13.42.38.132'
            def user = 'ubuntu'
            def localFile = '/home/jenkins/workspace/lab-blog-pipe/docker-compose.yml'
            def remotePath = '/home/ubuntu/docker-compose.yml'

            // SCP Command
            sh """
            scp -i ${pemPath} -o StrictHostKeyChecking=no ${localFile} ${user}@${ec2Host}:${remotePath}
            """

            // SSH Command
            sh """
            ssh -i ${pemPath} -o StrictHostKeyChecking=no ${user}@${ec2Host} '
                cd /home/ubuntu
                docker-compose down || true
                docker system prune -af --volumes || true
                docker-compose pull
                docker-compose up -d
            '
            """
        }
    }
}


NOT WORKING SNIPPET
        stage('Deployment On EC2') {
            steps {
                sshagent(['blog-lab-ssh']) {  // add the ssh key rather
                    script {
                        def ec2Host = '13.42.24.82'   // everytime the instance gets restarted remember to update the IP
                        def deployUser = 'ubuntu'
                        def localRepoPath = '/home/jenkins/workspace/lab-blog-pipe'
                        def remotePath = "/home/${deployUser}"
                        sh """
                            scp -o StrictHostKeyChecking=no ${localRepoPath}/docker-compose.yml ${deployUser}@${ec2Host}:${remotePath}/docker-compose.yml
                        """
                        sh """
                            ssh -o StrictHostKeyChecking=no ${deployUser}@${ec2Host} '
                                cd ${remotePath}
                                docker-compose down || true
                                docker system prune -af --volumes || true
                                docker-compose pull
                                docker-compose up -d
                            '
                        """
                    }
                }
            }
        }

        QUALITY  GATE CONFIGS
        stage('SonarCloud') {
              steps {
                withSonarQubeEnv('SonarQube') {

                    sh 'mvn clean package sonar:sonar '

                }
              }
            }

        stage("Quality Gate") {
              steps {
                timeout(time: 15, unit: 'MINUTES') { // If analysis takes longer than indicated time, then build will be aborted
                    waitForQualityGate abortPipeline: true
                    script{
                        def qg = waitForQualityGate() // Waiting for analysis to be completed
                        if(qg.status != 'OK'){ // If quality gate was not met, then present error
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
              }
            }

COMPOSE CONFIGS FOR POSTGRES DB
#   Database Service
#  postgres_data:
#    container_name: blog_app_db
#    image: postgres:latest
#    environment:
#      POSTGRES_USER: ${PG_USER}
#      POSTGRES_PASSWORD: ${PG_PASS}
#      PG_DATA: ${PG_DATA}
#      POSTGRES_DB: ${PG_DB}
#    volumes:
#      - ${SOURCE_VOLUME}:/var/lib/postgresql/data
#    ports:
#      - ${DB_PORT}
#    networks:
#      - ${NETWORK}
#    restart: on-failure:3
