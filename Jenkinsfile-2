pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-creds' // Jenkins credentials ID for Docker Hub
        DOCKER_IMAGE_NAME = 'maxfine22/blog-app:3.5' // Docker Hub image name
    }

    stages {

        stage('Clean Maven') {
            steps {
                echo "Workspace cleaned successfully."
                sh 'mvn clean'
                echo "HAPPY CLEANING>>>>>>>>"

            }
        }

        stage('Verify Build Tools') {
            steps {
                // Check if required build tools are installed
                sh 'docker --version'
                sh 'git --version'
                sh 'java --version'
                sh 'mvn -v'
            }
        }

        stage('Checkout Project') {
            steps {
                // Clone the project from GitHub
                sh '''
                    echo "Cloning repository..."
                    git clone https://github.com/MaxiFine/BlogAndAngular.git
                '''
            }
        }

        stage('Build Project') {

            steps {
                sh '''
                    echo "Checking project structure..."
                    ls -la

                    if [ ! -f "pom.xml" ]; then
                        echo "ERROR: pom.xml is missing in BlogAndAngular"
                        exit 1
                    fi

                    echo "Building the project with Maven..."
                    mvn clean package
                '''
            }
        }

        stage('Build Docker Image') {

            steps {
                script {
                    // Build the Docker image
                    sh '''
                        echo "Building Docker image..."
                        docker build -t $DOCKER_IMAGE_NAME maxfine22/blog-app:4.0 .
                    '''
                }
            }
        }
}
        stage('Login to Docker Hub') {

            steps {
                script {
                    // Login to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        echo "Logged in to Docker Hub successfully."
                    }
                }
            }
        }

        stage('Push Docker Image') {

            steps {
                script {
                    // Push the Docker image to Docker Hub
                    sh '''
                        echo "Pushing Docker image to Docker Hub..."
                        docker push maxfine22/blog-app:4.0
                    '''
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Run the Docker container
                    sh '''
                        echo "Running Docker container..."
                        docker run -d --name jenkins-built-container -p 8027:8027 maxfine22/blog-app:4.0
                        echo container now running>>>>>>
                    '''
                }
            }
        }

        stage('Run Project') {
            steps {
                echo "Project built and container started successfully and deployed."
                echo "Test at http://localhost:8027"
                echo "Thank you...."
            }
        }
    }
}


WORKING TYPE TWO WITH SYNTAX ERROR  BUT WITH FIX BELOW
stages {
    stage('Build Docker Image') {
        steps {
            script {
                docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
            }
        }
    }
}


// pipeline {
//     agent {
//         label 'agent1'
//     }
//
//     environment {
//         DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
//         DOCKER_IMAGE_NAME = 'maxfine22/blog-app'
//         IMAGE_TAG = "4.0"
//         PROJECT_URL = "http://localhost:8027/api/v1/blog/all-posts"
//         SSH_KEY_ID = "blog-lab-ssh"
//         AWS_ACCESS_KEY_ID = credentials('blog-lab-accesskeys')    // Use Jenkins credentials store
//         AWS_SECRET_ACCESS_KEY = credentials('AKIAZM7VS5FVCZYJLKVF')
//         AWS_DEFAULT_REGION = 'us-east-2'
//     }
//
//     stages {
//
//         stage('Clean Workspace') {
//             steps {
//                 sh '''
//                     if [ -d "BlogAndAngular" ]; then
//                         echo "Removing existing BlogAndAngular directory..."
//                         rm -rf BlogAndAngular
//                     fi
//                 '''
//             }
//         }
//
//         stage('Verify Build Tools') {
//             steps {
//                 sh 'docker --version'
//                 sh 'git --version'
//                 sh 'java --version'
//                 sh 'mvn -v'
//             }
//         }
//
//         stage('Checkout Project') {
//             steps {
//                 sh '''
//                     git clone https://github.com/MaxiFine/BlogAndAngular.git
//                 '''
//             }
//         }
//
//         stage('Build CLEAN') {
//             steps {
//                 dir('BlogAndAngular') {
//                     sh '''
//                         if [ ! -f "pom.xml" ]; then
//                             echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>ERROR: pom.xml is missing<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
//                             exit 1
//                         fi
//                         mvn clean
//                     '''
//                     echo "BUILD CLEAN>>>>>>>>>>>>>NOW >>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
//                 }
//             }
//         }
//
//          stage('Build PACKAGE') {
//                     steps {
//                         dir('BlogAndAngular') {
//                             sh '''
//                                 if [ ! -f "pom.xml" ]; then
//                                     echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>ERROR: pom.xml is missing<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
//                                     exit 1
//                                 fi
//                                 mvn package
//                             '''
//                             echo "finally packaged>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
//                         }
//                     }
//                 }
//
//          stage('Build Docker Image') {
//
//                     steps {
//                         script {
//                             // Build the Docker image
//                             sh '''
//                                 echo "<<<<<<<<<<<<<<<<<Building Docker image...>>>>>>>>>>>>>>>>>>>"
//                                 docker build -t $DOCKER_IMAGE_NAME:$IMAGE_TAG .
//                                 echo "<<<<<<<<<<<<<<<<<<<<<<<IMAGE BUILT>>>>>>>>>>>>>>>>>>>>>>>>>"
//                                 echo "IMAGE BUILT WITH TAG $IMAGE_TAG>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
//
//                             '''
//                         }
//                     }
//                 }
//
//
//             stage('Login to Docker Hub') {
//                 steps {
//                     script {
//                         withCredentials([usernamePassword(credentialsId: "$DOCKER_CREDENTIALS_ID", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
//                             sh '''
//                                 echo "Logging into Docker Hub...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
//                                 echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
//                                 echo "Login successful!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
//                             '''
//                         }
//                     }
//                 }
//             }
//
//
//         stage('Push Docker Image') {
//             steps {
//                 script {
//                     docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
//                         docker.image("$DOCKER_IMAGE_NAME:$IMAGE_TAG").push()
//                     }
//                 }
//             }
//         }
//
//
//         stage('Run Docker Container') {
//             steps {
//                 sh '''
//                     if [ "$(docker ps -aq -f name=jenkins-built-container)" ]; then
//                         docker stop jenkins-built-container || true
//                         docker rm jenkins-built-container || true
//                     fi
//                     docker run -d --name jenkins-built-container -p 8027:8027 maxfine22/blog-app:4.0
//                 '''
//             }
//         }
//
//         stage('Accessing the App Project') {
//             steps {
//                 echo "Test the application at $PROJECT_URL"
//             }
//         }
//     }
//
//
//
//                     stage('Deploy Application to EC2 instance') {
//                         steps {
//                             script {
//                                 // Define your EC2 instance details
//                                 def ec2Instance = 'ubuntu@13.42.38.132'
//                                 def deploymentDir = dir('BlogAndAngular')
//
//                                 withCredentials([sshUserPrivateKey(credentialsId: 'blog-lab-ssh', keyVariable: 'SSH_KEY_ID')]) {
//                                     sh """
//                                     ssh -o StrictHostKeyChecking=no -i \$SSH_PRIVATE_KEY $ec2Instance << 'ENDSSH'
//                                         cd $deploymentDir
//                                         docker-compose down
//                                         docker-compose pull
//                                         docker-compose up -d
//                                     ENDSSH
//                                     """
//                                 }
//                             }
//                         }
//                     }
//
//
//                 stage('Backup Jenkins Server to S3') {
//                     steps {
//                         script {
//                             def s3Bucket = 'blog-lab-bucket'
//                             def backupDir = '/var/jenkins_home'
//                             def timestamp = new Date().format("yyyyMMddHHmmss")
//                             def backupFile = "jenkins_backup_${timestamp}.tar.gz"
//
//                             sh "tar -czvf ${backupFile} -C ${backupDir} ."
//
//              // Upload to S3 using AWS CLI with access keys set in environment variables
//                         withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
//                             sh "aws s3 cp ${backupFile} s3://$s3Bucket/$backupFile"
//                         }
//
//                         // Clean up local backup file
//                         sh "rm -f ${backupFile}"
//                             //sh "aws s3 cp ${backupFile} s3://$s3Bucket/$backupFile"
//                             sh "rm -f ${backupFile}"
//                         }
//                     }
//                             }
//
//
//
//     post {
//         always {
//             echo '````````````````````````````Pipeline finished.``````````````````````````````'
//             echo "Docker image $DOCKER_IMAGE_NAME:$IMAGE_TAG is to be removed."
//              sh "docker rmi -f $DOCKER_IMAGE_NAME:$IMAGE_TAG || true"
//             deleteDir()
//             sh 'docker system prune -f'
//         }
//     }
//
// }
//
//
// pipeline {
//     agent {
//         label 'agent1'
//     }
//
//     environment {
//         DOCKER_CREDENTIALS_ID = "docker-hub-creds"
//         DOCKER_IMAGE_NAME = "maxfine22/blog-app"
//         IMAGE_TAG = "4.0"
//         PROJECT_URL = "http://localhost:8027/api/v1/blog/all-posts"
//         SSH_KEY_ID = "blog-lab-ssh"
//         AWS_ACCESS_KEY_ID = credentials("blog-lab-accesskeys") // Use Jenkins credentials store
//         AWS_SECRET_ACCESS_KEY = credentials("blog-lab-secret-keys") // Ensure you also store secret this way
//         AWS_DEFAULT_REGION = "us-east-2"
//     }
//
//     stages {
//         stage('Clean Workspace') {
//             steps {
//                 sh '''
//                     if [ -d "BlogAndAngular" ]; then
//                         echo "Removing existing BlogAndAngular directory..."
//                         rm -rf BlogAndAngular
//                     fi
//                 '''
//             }
//         }
//
//         stage('Verify Build Tools') {
//             steps {
//                 sh 'docker --version'
//                 sh 'git --version'
//                 sh 'java --version'
//                 sh 'mvn -v'
//             }
//         }
//
//           stage('Verify Git Configuration') {
//                     steps {
//                         sh 'git config --global http.postBuffer 524288000' // Increase buffer
//                         sh 'git config --global http.version HTTP/1.1'     // Set HTTP version to 1.1
//                     }
//                 }
//
//                 stage('Checkout Project') {
//                     steps {
//                         sh 'git clone https://github.com/MaxiFine/BlogAndAngular.git' // Change this to SSH if needed
//                     }
//                 }
//
//         stage('Checkout Project') {
//             steps {
//                 sh 'git clone https://github.com/MaxiFine/BlogAndAngular.git'
//             }
//         }
//
//         stage('Build CLEAN') {
//             steps {
//                 dir('BlogAndAngular') {
//                     sh '''
//                         if [ ! -f "pom.xml" ]; then
//                             echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>ERROR: pom.xml is missing<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
//                             exit 1
//                         fi
//                         mvn clean
//                     '''
//                     echo "BUILD CLEAN>>>>>>>>>>>>>NOW >>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
//                 }
//             }
//         }
//
//         stage('Build PACKAGE') {
//             steps {
//                 dir('BlogAndAngular') {
//                     sh '''
//                         if [ ! -f "pom.xml" ]; then
//                             echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>ERROR: pom.xml is missing<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
//                             exit 1
//                         fi
//                         mvn package
//                     '''
//                     echo "finally packaged>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
//                 }
//             }
//         }
//
//         stage('Build Docker Image') {
//             steps {
//                 script {
//                     sh '''
//                         echo "<<<<<<<<<<<<<<<<<Building Docker image...>>>>>>>>>>>>>>>>>>>"
//                         docker build -t $DOCKER_IMAGE_NAME:$IMAGE_TAG .
//                         echo "<<<<<<<<<<<<<<<<<<<<<<<IMAGE BUILT>>>>>>>>>>>>>>>>>>>>>>>>>"
//                         echo "IMAGE BUILT WITH TAG $IMAGE_TAG>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
//                     '''
//                 }
//             }
//         }
//
//         stage('Login to Docker Hub') {
//             steps {
//                 script {
//                     withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
//                         sh '''
//                             echo "Logging into Docker Hub...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
//                             echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
//                             echo "Login successful!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
//                         '''
//                     }
//                 }
//             }
//         }
//
//         stage('Push Docker Image') {
//             steps {
//                 script {
//                     docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
//                         docker.image("$DOCKER_IMAGE_NAME:$IMAGE_TAG").push()
//                     }
//                 }
//             }
//         }
//
//         stage('Run Docker Container') {
//             steps {
//                 sh '''
//                     if [ "$(docker ps -aq -f name=jenkins-built-container)" ]; then
//                         docker stop jenkins-built-container || true
//                         docker rm jenkins-built-container || true
//                     fi
//                     docker run -d --name jenkins-built-container -p 8027:8027 maxfine22/blog-app:4.0
//                 '''
//             }
//         }
//
//         stage('Accessing the App Project') {
//             steps {
//                 echo "Test the application at $PROJECT_URL"
//             }
//         }
//
//         stage('Deploy Application to EC2 instance') {
//             steps {
//                 script {
//                     // Define your EC2 instance details
//                     def ec2Instance = 'ubuntu@13.42.38.132'
//                     def deploymentDir = "BlogAndAngular" // Assuming it's in the working directory
//
//                     withCredentials([sshUserPrivateKey(credentialsId: 'blog-lab-ssh', keyVariable: 'SSH_KEY_ID')]) {
//                         sh """
//                         ssh -o StrictHostKeyChecking=no -i \$SSH_PRIVATE_KEY $ec2Instance << 'ENDSSH'
//                             cd $deploymentDir
//                             docker-compose down
//                             docker-compose pull
//                             docker-compose up -d
//                         ENDSSH
//                         """
//                     }
//                 }
//             }
//         }
//
//         stage('Backup Jenkins Server to S3') {
//             steps {
//                 script {
//                     def s3Bucket = 'blog-lab-bucket'
//                     def backupDir = '/var/jenkins_home'
//                     def timestamp = new Date().format("yyyyMMddHHmmss")
//                     def backupFile = "jenkins_backup_${timestamp}.tar.gz"
//
//                     sh "tar -czvf ${backupFile} -C ${backupDir} ."
//
//                     // Upload to S3 using AWS CLI with access keys set in environment variables
//                     withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
//                         sh "aws s3 cp ${backupFile} s3://$s3Bucket/$backupFile"
//                     }
//
//                     // Clean up local backup file
//                     sh "rm -f ${backupFile}"
//                 }
//             }
//         }
//
//
//      post {
//         always {
//             echo '````````````````````````````Pipeline finished.``````````````````````````````'
//             echo "Docker image $DOCKER_IMAGE_NAME:$IMAGE_TAG is to be removed."
//             sh "docker rmi -f $DOCKER_IMAGE_NAME:$IMAGE_TAG || true"
//             deleteDir()
//             sh 'docker system prune -f'
//         }
//     }
// }


// NEW TYPE WITH ERROR 8:23
pipeline {
    agent {
        label 'agent1'
    }

    environment {
        DOCKER_CREDENTIALS_ID = "docker-hub-creds"
        DOCKER_IMAGE_NAME = "maxfine22/blog-app"
        IMAGE_TAG = "4.0"
        PROJECT_URL = "http://localhost:8027/api/v1/blog/all-posts"
        SSH_KEY_ID = "blog-lab-ssh"
        AWS_ACCESS_KEY_ID = credentials("blog-lab-accesskeys") // Use Jenkins credentials store
//         AWS_SECRET_ACCESS_KEY = credentials("blog-lab-secret-keys") // Ensure you also store secret this way
        AWS_DEFAULT_REGION = "us-east-2"
    }

//     stages {
//         stage('Clean Workspace') {
//             steps {
//                 sh '''
//                     if [ -d "BlogAndAngular" ]; then
//                         echo "Removing existing BlogAndAngular directory..."
//                         rm -rf BlogAndAngular
//                     fi
//                 '''
//                 cleanWs()
//             }
//         }

            stage('Clean Workspace') {
                steps {
                    cleanWs()
                }
            }


        stage('Verify Build Tools') {
            steps {
                sh 'docker --version'
                sh 'git --version'
                sh 'java --version'
                sh 'mvn -v'
            }
        }

//         stage('Verify Git Configuration') {
//             steps {
//                 sh 'git config --global http.postBuffer 524288000' // Increase buffer
//                 sh 'git config --global http.version HTTP/1.1'     // Set HTTP version to 1.1
//             }
//         }

        stage('Checkout Project') { // Keep this stage
            steps {
                sh 'git clone https://github.com/MaxiFine/BlogAndAngular.git' // Change this to SSH if needed
            }
        }

        stage('Build CLEAN') {
            steps {
                dir('BlogAndAngular') {
                    sh '''
                        if [ ! -f "pom.xml" ]; then
                            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>ERROR: pom.xml is missing<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
                            exit 1
                        fi
                        mvn clean
                    '''
                    echo "BUILD CLEAN>>>>>>>>>>>>>NOW >>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
                }
            }
        }

        stage('Build PACKAGE') {
            steps {
                dir('BlogAndAngular') {
                    sh '''
                        if [ ! -f "pom.xml" ]; then
                            echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>ERROR: pom.xml is missing<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
                            exit 1
                        fi
                        mvn package
                    '''
                    echo "finally packaged>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        echo "<<<<<<<<<<<<<<<<<Building Docker image...>>>>>>>>>>>>>>>>>>>"
                        docker build -t $DOCKER_IMAGE_NAME:$IMAGE_TAG .
                        echo "<<<<<<<<<<<<<<<<<<<<<<<IMAGE BUILT>>>>>>>>>>>>>>>>>>>>>>>>>"
                        echo "IMAGE BUILT WITH TAG $IMAGE_TAG>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                    '''
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            echo "Logging into Docker Hub...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                            echo "Login successful!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
                        '''
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        docker.image("$DOCKER_IMAGE_NAME:$IMAGE_TAG").push()
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                sh '''
                    if [ "$(docker ps -aq -f name=jenkins-built-container)" ]; then
                        docker stop jenkins-built-container || true
                        docker rm jenkins-built-container || true
                    fi
                    docker run -d --name jenkins-built-container -p 8027:8027 maxfine22/blog-app:4.0
                '''
            }
        }

        stage('Accessing the App Project') {
            steps {
                echo "Test the application at $PROJECT_URL"
            }
        }

        stage('Deploy Application to EC2 instance') {
            steps {
                script {
                    // Define your EC2 instance details
                    def ec2Instance = 'ubuntu@13.42.38.132'
                    def deploymentDir = "BlogAndAngular" // Assuming it's in the working directory

                    withCredentials([sshUserPrivateKey(credentialsId: 'blog-lab-ssh', keyVariable: 'SSH_KEY_ID')]) {
                        sh """
                        ssh -o StrictHostKeyChecking=no -i \$SSH_PRIVATE_KEY $ec2Instance << 'ENDSSH'
                            cd $deploymentDir
                            docker-compose down
                            docker-compose pull
                            docker-compose up -d
                        ENDSSH
                        """
                    }
                }
            }
        }

        stage('Backup Jenkins Server to S3') {
            steps {
                script {
                    def s3Bucket = 'blog-lab-bucket'
                    def backupDir = '/var/jenkins_home'
                    def timestamp = new Date().format("yyyyMMddHHmmss")
                    def backupFile = "jenkins_backup_${timestamp}.tar.gz"

                    sh "tar -czvf ${backupFile} -C ${backupDir} ."

                    // Upload to S3 using AWS CLI with access keys set in environment variables
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh "aws s3 cp ${backupFile} s3://$s3Bucket/$backupFile"
                    }

                    // Clean up local backup file
                    sh "rm -f ${backupFile}"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline finished successfully.'
            echo "Cleaning up Docker image $DOCKER_IMAGE_NAME:$IMAGE_TAG."
            sh "docker rmi -f $DOCKER_IMAGE_NAME:$IMAGE_TAG || true"
            sh 'docker system prune -f'
        }
        failure {
            echo 'Pipeline failed. Skipping cleanup steps.'
        }
        always {
            echo '>>>>>>>>>>>>>>>>>>>>>>Pipeline execution completed.>>>>>>>>>>>>>>'
        }
    }



}


stage('Deployment On EC2') {
    steps {
        sshagent(['blog-lab-ssh']) {
            sh '''
                # Ensure the env file exists on the remote server
                scp -o StrictHostKeyChecking=no .env ubuntu@13.42.38.132:/home/ubuntu/${APP_NAME}.env

                # Stop and remove existing container if it exists
                ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "docker stop ${APP_NAME} || true"
                ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "docker rm ${APP_NAME} || true"

                # Pull and run the new container with env file
                ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "docker pull ${DOCKER_IMAGE_NAME}:${IMAGE_TAG} && \
                docker run -d \
                --env-file /home/ubuntu/${APP_NAME}.env \
                -p 8027:8027 \
                --name ${APP_NAME} \
                ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}"
            '''
        }
    }
}



       stage('Deployment On EC2') {
                steps {
                    sshagent(['blog-lab-ssh']) {
                        sh '''
                            # Create the env file from the credentials
                            echo "$BLOG_ENV" > .env

                            # Copy the env file to the remote server
                            scp -o StrictHostKeyChecking=no .env ubuntu@13.42.38.132:/home/ubuntu/${APP_NAME}.env

                            # Optional: Remove the local env file for security
                            rm .env

                            # Stop and remove existing container if it exists
                            ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "docker stop ${APP_NAME} || true"
                            ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "docker rm ${APP_NAME} || true"

                            # Pull and run the new container with env file
                            ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "docker pull ${DOCKER_IMAGE_NAME}:${IMAGE_TAG} && \
                            docker run -d \
                            --env-file /home/ubuntu/${APP_NAME}.env \
                            -p 8027:8027 \
                            --name ${APP_NAME} \
                            ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}"

                            # Optional: Remove the env file from the remote server after deployment
                            ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "rm /home/ubuntu/${APP_NAME}.env"
                        '''
                    }
                }
            }


            //
            //          stage('Deployment On EC2') {
            //                     steps {
            //                         sshagent(['blog-lab-ssh']) {
            //                             sh '''
            //                                 ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "docker pull ${DOCKER_IMAGE_NAME}:${IMAGE_TAG} || true && docker run -d -p 8027:8027 --name ${APP_NAME} ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}"
            //                             '''
            //                         }
            //                     }
            //                 }


s3 stage build
stage('Backup Jenkins Server to S3') {
    steps {
        script {
            try {
                def s3Bucket = 'blog-lab-bucket'
                def backupDir = "${env.JENKINS_HOME}" // Use the Jenkins environment variable
                def timestamp = new Date().format("yyyyMMddHHmmss")
                def backupFile = "jenkins_backup_${timestamp}.tar.gz"

                // Check if backup directory exists or create it
                sh "mkdir -p ${backupDir}" // Create the directory if it doesn't exist

                sh "tar -czvf ${backupFile} -C ${backupDir} ."
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "aws s3 cp ${backupFile} s3://$s3Bucket/$backupFile"
                }
                sh "rm -f ${backupFile}"

                echo "Backup successful: ${backupFile}"
            } catch (Exception e) {
                echo "Backup failed: ${e.message}"
                // Optionally, you can choose to fail the pipeline or just log the error
                // currentBuild.result = 'FAILURE'
            }
        }
    }
}F

FIALING ON EC2 INSTANCE
stage('Deployment On EC2') {
                steps {
                    sshagent(['blog-lab-ssh']) {
                        sh '''
                            # Stop and remove existing container if it exists
                            ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "docker stop ${APP_NAME} || true"
                            ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "docker rm ${APP_NAME} || true"

                            # Pull and run the new container with env file
                            ssh -o StrictHostKeyChecking=no ubuntu@13.42.38.132 "docker pull ${DOCKER_IMAGE_NAME}:${IMAGE_TAG} && \
                            docker run -d \
                            --env-file /home/ubuntu/.env \
                            -p 8027:8027 \
                            --name ${APP_NAME} \
                            ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}"
                        '''
                    }
                }
            }

stage('Deployment On EC2') {
    steps {
        sshagent(['blog-lab-ssh']) {
            script {
                def ec2Host = '13.42.38.132'
                def deployUser = 'ubuntu'
                def repoUrl = 'https://github.com/MaxiFine/BlogAndAngular.git'
                def repoName = 'BlogAndAngular'

                // Clean up existing deployment
                sh """
                    ssh -o StrictHostKeyChecking=no ${deployUser}@${ec2Host} '''
                        rm -rf ~/${repoName} || true
                        docker-compose down || true
                    '''
                """

                // Clone repository
                sh """
                    ssh -o StrictHostKeyChecking=no ${deployUser}@${ec2Host} '''
                        git clone ${repoUrl}
                    '''
                """

                // Deploy with Docker Compose
                sh """
                    ssh -o StrictHostKeyChecking=no ${deployUser}@${ec2Host} '''
                        cd ~/${repoName}
                        docker-compose pull
                        docker-compose up -d
                    '''
                """
            }
        }
    }
}

COMBINE TYPE
stage('Deployment On EC2') {
    steps {
        sshagent(['blog-lab-ssh']) {
            script {
                def ec2Host = '13.42.38.132'
                def deployUser = 'ubuntu'
                def repoUrl = 'https://github.com/MaxiFine/BlogAndAngular.git'
                def repoName = 'BlogAndAngular'

                // SSH into the EC2 instance and perform deployment
                sh """
                    # Clone or update the repository
                    ssh -o StrictHostKeyChecking=no ${deployUser}@${ec2Host} '''
                        # Remove existing directory if it exists
                        rm -rf ~/${repoName} || true

                        # Clone the repository
                        git clone ${repoUrl}

                        # Change to the project directory
                        cd ~/${repoName}

                        # Stop existing containers
                        docker-compose down || true

                        # Pull latest images
                        docker-compose pull

                        # Start the application
                        docker-compose up -d
                    '''
                """
            }
        }
    }
}


S3 PUSH BACKUP UPGRADE
stage('Backup Jenkins Server to S3') {
    steps {
        script {
            try {
                def s3Bucket = 'blog-lab-bucket'
                def backupDir = '/home/jenkins'
                def timestamp = new Date().format("yyyyMMddHHmmss")
                def backupFile = "jenkins_backup_${timestamp}.tar.gz"

                // Ensure backup directory exists
                sh "mkdir -p ${backupDir}"

                // Create a temporary backup folder
                sh "cp -r ${backupDir}/workspace ./temp_backup || exit 0"

                // Create the backup archive
                sh "tar --ignore-failed-read -czvf ${backupFile} -C ./temp_backup ."

                // Upload to S3
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "aws s3 cp ${backupFile} s3://$s3Bucket/$backupFile"
                }

                // Cleanup
                sh "rm -rf ./temp_backup"
                sh "rm -f ${backupFile}"

                echo "Backup successful: ${backupFile}"
            } catch (Exception e) {
                echo "Backup failed: ${e.message}"
                // Optionally, you can fail the pipeline
                // currentBuild.result = 'FAILURE'
            }
        }
    }
}

stage('Cleanup System') {
    when {
        expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
    }
    steps {
        sh "docker system prune -f"
    }
}

 EC2 TYPE 2
   stage('Deployment On EC2') {
             steps {
                 sshagent(['blog-lab-ssh']) {
                     script {
                         def ec2Host = '13.42.38.132'
                         def deployUser = 'ubuntu'
                         def repoUrl = 'https://github.com/MaxiFine/BlogAndAngular.git'
                         def repoName = 'BlogAndAngular'

                         // SSH into the EC2 instance and perform deployment
                         sh """
                             ssh -o StrictHostKeyChecking=no ${deployUser}@${ec2Host} '
                                 rm -rf ~/${repoName} || true
                                 git clone ${repoUrl}
                                 cd ~/${repoName}
                                 docker-compose down || true
                                 docker-compose up -d
                             '
                         """
                     }
                 }
             }
         }


                               // Copy docker-compose file to EC2 instance
         //                       sh """
         //                           scp -o StrictHostKeyChecking=no $repoName/docker-compose.yml ${deployUser}@${ec2Host}:~/docker-compose.yml
         //                       """
